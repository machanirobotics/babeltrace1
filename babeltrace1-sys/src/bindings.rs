/* automatically generated by rust-bindgen 0.69.4 */

pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_list_head {
    pub next: *mut bt_list_head,
    pub prev: *mut bt_list_head,
}
#[test]
fn bindgen_test_layout_bt_list_head() {
    const UNINIT: ::std::mem::MaybeUninit<bt_list_head> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bt_list_head>(),
        16usize,
        concat!("Size of: ", stringify!(bt_list_head))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_list_head>(),
        8usize,
        concat!("Alignment of ", stringify!(bt_list_head))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_list_head),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_list_head),
            "::",
            stringify!(prev)
        )
    );
}
pub const bt_clock_type_BT_CLOCK_CYCLES: bt_clock_type = 0;
pub const bt_clock_type_BT_CLOCK_REAL: bt_clock_type = 1;
pub type bt_clock_type = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type bt_intern_str = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_stream_pos {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_trace_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_trace_descriptor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_mmap_stream {
    pub fd: ::std::os::raw::c_int,
    pub list: bt_list_head,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_bt_mmap_stream() {
    const UNINIT: ::std::mem::MaybeUninit<bt_mmap_stream> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bt_mmap_stream>(),
        32usize,
        concat!("Size of: ", stringify!(bt_mmap_stream))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_mmap_stream>(),
        8usize,
        concat!("Alignment of ", stringify!(bt_mmap_stream))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_mmap_stream),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_mmap_stream),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_mmap_stream),
            "::",
            stringify!(priv_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_mmap_stream_list {
    pub head: bt_list_head,
}
#[test]
fn bindgen_test_layout_bt_mmap_stream_list() {
    const UNINIT: ::std::mem::MaybeUninit<bt_mmap_stream_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bt_mmap_stream_list>(),
        16usize,
        concat!("Size of: ", stringify!(bt_mmap_stream_list))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_mmap_stream_list>(),
        8usize,
        concat!("Alignment of ", stringify!(bt_mmap_stream_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_mmap_stream_list),
            "::",
            stringify!(head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_format {
    pub name: bt_intern_str,
    pub open_trace: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            packet_seek: ::std::option::Option<
                unsafe extern "C" fn(
                    pos: *mut bt_stream_pos,
                    index: usize,
                    whence: ::std::os::raw::c_int,
                ),
            >,
            metadata_fp: *mut FILE,
        ) -> *mut bt_trace_descriptor,
    >,
    pub open_mmap_trace: ::std::option::Option<
        unsafe extern "C" fn(
            mmap_list: *mut bt_mmap_stream_list,
            packet_seek: ::std::option::Option<
                unsafe extern "C" fn(
                    pos: *mut bt_stream_pos,
                    index: usize,
                    whence: ::std::os::raw::c_int,
                ),
            >,
            metadata_fp: *mut FILE,
        ) -> *mut bt_trace_descriptor,
    >,
    pub close_trace: ::std::option::Option<
        unsafe extern "C" fn(descriptor: *mut bt_trace_descriptor) -> ::std::os::raw::c_int,
    >,
    pub set_context: ::std::option::Option<
        unsafe extern "C" fn(descriptor: *mut bt_trace_descriptor, ctx: *mut bt_context),
    >,
    pub set_handle: ::std::option::Option<
        unsafe extern "C" fn(descriptor: *mut bt_trace_descriptor, handle: *mut bt_trace_handle),
    >,
    pub timestamp_begin: ::std::option::Option<
        unsafe extern "C" fn(
            descriptor: *mut bt_trace_descriptor,
            handle: *mut bt_trace_handle,
            type_: bt_clock_type,
        ) -> u64,
    >,
    pub timestamp_end: ::std::option::Option<
        unsafe extern "C" fn(
            descriptor: *mut bt_trace_descriptor,
            handle: *mut bt_trace_handle,
            type_: bt_clock_type,
        ) -> u64,
    >,
    pub convert_index_timestamp: ::std::option::Option<
        unsafe extern "C" fn(descriptor: *mut bt_trace_descriptor) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_bt_format() {
    const UNINIT: ::std::mem::MaybeUninit<bt_format> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bt_format>(),
        72usize,
        concat!("Size of: ", stringify!(bt_format))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_format>(),
        8usize,
        concat!("Alignment of ", stringify!(bt_format))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_format),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_trace) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_format),
            "::",
            stringify!(open_trace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_mmap_trace) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_format),
            "::",
            stringify!(open_mmap_trace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close_trace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_format),
            "::",
            stringify!(close_trace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_context) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_format),
            "::",
            stringify!(set_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_handle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_format),
            "::",
            stringify!(set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp_begin) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_format),
            "::",
            stringify!(timestamp_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp_end) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_format),
            "::",
            stringify!(timestamp_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).convert_index_timestamp) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_format),
            "::",
            stringify!(convert_index_timestamp)
        )
    );
}
extern "C" {
    pub fn bt_lookup_format(qname: bt_intern_str) -> *mut bt_format;
}
extern "C" {
    pub fn bt_fprintf_format_list(fp: *mut FILE);
}
extern "C" {
    pub fn bt_register_format(format: *mut bt_format) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_unregister_format(format: *mut bt_format);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_ctf_event {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bt_context_create() -> *mut bt_context;
}
extern "C" {
    pub fn bt_context_add_trace(
        ctx: *mut bt_context,
        path: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        packet_seek: ::std::option::Option<
            unsafe extern "C" fn(
                pos: *mut bt_stream_pos,
                index: usize,
                whence: ::std::os::raw::c_int,
            ),
        >,
        stream_list: *mut bt_mmap_stream_list,
        metadata: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_context_remove_trace(
        ctx: *mut bt_context,
        trace_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_context_get(ctx: *mut bt_context);
}
extern "C" {
    pub fn bt_context_put(ctx: *mut bt_context);
}
extern "C" {
    pub fn bt_ctf_event_get_context(event: *const bt_ctf_event) -> *mut bt_context;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_iter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_saved_pos {
    _unused: [u8; 0],
}
pub const bt_iter_pos_type_BT_SEEK_TIME: bt_iter_pos_type = 0;
pub const bt_iter_pos_type_BT_SEEK_RESTORE: bt_iter_pos_type = 1;
pub const bt_iter_pos_type_BT_SEEK_CUR: bt_iter_pos_type = 2;
pub const bt_iter_pos_type_BT_SEEK_BEGIN: bt_iter_pos_type = 3;
pub const bt_iter_pos_type_BT_SEEK_LAST: bt_iter_pos_type = 4;
pub type bt_iter_pos_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bt_iter_pos {
    pub type_: bt_iter_pos_type,
    pub u: bt_iter_pos__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bt_iter_pos__bindgen_ty_1 {
    pub seek_time: u64,
    pub restore: *mut bt_saved_pos,
}
#[test]
fn bindgen_test_layout_bt_iter_pos__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<bt_iter_pos__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bt_iter_pos__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(bt_iter_pos__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_iter_pos__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(bt_iter_pos__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_iter_pos__bindgen_ty_1),
            "::",
            stringify!(seek_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).restore) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_iter_pos__bindgen_ty_1),
            "::",
            stringify!(restore)
        )
    );
}
#[test]
fn bindgen_test_layout_bt_iter_pos() {
    const UNINIT: ::std::mem::MaybeUninit<bt_iter_pos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bt_iter_pos>(),
        16usize,
        concat!("Size of: ", stringify!(bt_iter_pos))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_iter_pos>(),
        8usize,
        concat!("Alignment of ", stringify!(bt_iter_pos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_iter_pos),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_iter_pos),
            "::",
            stringify!(u)
        )
    );
}
extern "C" {
    pub fn bt_iter_next(iter: *mut bt_iter) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_iter_get_pos(iter: *mut bt_iter) -> *mut bt_iter_pos;
}
extern "C" {
    pub fn bt_iter_free_pos(pos: *mut bt_iter_pos);
}
extern "C" {
    pub fn bt_iter_set_pos(iter: *mut bt_iter, pos: *const bt_iter_pos) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_iter_create_time_pos(iter: *mut bt_iter, timestamp: u64) -> *mut bt_iter_pos;
}
extern "C" {
    pub fn bt_trace_handle_get_path(
        ctx: *mut bt_context,
        handle_id: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bt_trace_handle_get_timestamp_begin(
        ctx: *mut bt_context,
        handle_id: ::std::os::raw::c_int,
        type_: bt_clock_type,
    ) -> u64;
}
extern "C" {
    pub fn bt_trace_handle_get_timestamp_end(
        ctx: *mut bt_context,
        handle_id: ::std::os::raw::c_int,
        type_: bt_clock_type,
    ) -> u64;
}
extern "C" {
    pub fn bt_ctf_event_get_handle_id(event: *const bt_ctf_event) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_definition {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_declaration {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_ctf_event_decl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_ctf_field_decl {
    _unused: [u8; 0],
}
pub const bt_ctf_scope_BT_TRACE_PACKET_HEADER: bt_ctf_scope = 0;
pub const bt_ctf_scope_BT_STREAM_PACKET_CONTEXT: bt_ctf_scope = 1;
pub const bt_ctf_scope_BT_STREAM_EVENT_HEADER: bt_ctf_scope = 2;
pub const bt_ctf_scope_BT_STREAM_EVENT_CONTEXT: bt_ctf_scope = 3;
pub const bt_ctf_scope_BT_EVENT_CONTEXT: bt_ctf_scope = 4;
pub const bt_ctf_scope_BT_EVENT_FIELDS: bt_ctf_scope = 5;
pub type bt_ctf_scope = ::std::os::raw::c_uint;
pub const ctf_type_id_CTF_TYPE_UNKNOWN: ctf_type_id = 0;
pub const ctf_type_id_CTF_TYPE_INTEGER: ctf_type_id = 1;
pub const ctf_type_id_CTF_TYPE_FLOAT: ctf_type_id = 2;
pub const ctf_type_id_CTF_TYPE_ENUM: ctf_type_id = 3;
pub const ctf_type_id_CTF_TYPE_STRING: ctf_type_id = 4;
pub const ctf_type_id_CTF_TYPE_STRUCT: ctf_type_id = 5;
pub const ctf_type_id_CTF_TYPE_UNTAGGED_VARIANT: ctf_type_id = 6;
pub const ctf_type_id_CTF_TYPE_VARIANT: ctf_type_id = 7;
pub const ctf_type_id_CTF_TYPE_ARRAY: ctf_type_id = 8;
pub const ctf_type_id_CTF_TYPE_SEQUENCE: ctf_type_id = 9;
pub const ctf_type_id_NR_CTF_TYPES: ctf_type_id = 10;
pub type ctf_type_id = ::std::os::raw::c_uint;
pub const ctf_string_encoding_CTF_STRING_NONE: ctf_string_encoding = 0;
pub const ctf_string_encoding_CTF_STRING_UTF8: ctf_string_encoding = 1;
pub const ctf_string_encoding_CTF_STRING_ASCII: ctf_string_encoding = 2;
pub const ctf_string_encoding_CTF_STRING_UNKNOWN: ctf_string_encoding = 3;
pub type ctf_string_encoding = ::std::os::raw::c_uint;
extern "C" {
    pub fn bt_ctf_get_top_level_scope(
        event: *const bt_ctf_event,
        scope: bt_ctf_scope,
    ) -> *const bt_definition;
}
extern "C" {
    pub fn bt_ctf_event_name(event: *const bt_ctf_event) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bt_ctf_get_cycles(event: *const bt_ctf_event) -> u64;
}
extern "C" {
    pub fn bt_ctf_get_timestamp(event: *const bt_ctf_event) -> u64;
}
extern "C" {
    pub fn bt_ctf_get_field_list(
        event: *const bt_ctf_event,
        scope: *const bt_definition,
        list: *mut *const *const bt_definition,
        count: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_ctf_get_field(
        event: *const bt_ctf_event,
        scope: *const bt_definition,
        field: *const ::std::os::raw::c_char,
    ) -> *const bt_definition;
}
extern "C" {
    pub fn bt_ctf_get_index(
        event: *const bt_ctf_event,
        field: *const bt_definition,
        index: ::std::os::raw::c_uint,
    ) -> *const bt_definition;
}
extern "C" {
    pub fn bt_ctf_field_name(def: *const bt_definition) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bt_ctf_get_decl_from_def(def: *const bt_definition) -> *const bt_declaration;
}
extern "C" {
    pub fn bt_ctf_get_decl_from_field_decl(
        field: *const bt_ctf_field_decl,
    ) -> *const bt_declaration;
}
extern "C" {
    pub fn bt_ctf_field_type(decl: *const bt_declaration) -> ctf_type_id;
}
extern "C" {
    pub fn bt_ctf_get_int_signedness(decl: *const bt_declaration) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_ctf_get_int_base(decl: *const bt_declaration) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_ctf_get_int_byte_order(decl: *const bt_declaration) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_ctf_get_int_len(decl: *const bt_declaration) -> isize;
}
extern "C" {
    pub fn bt_ctf_get_encoding(decl: *const bt_declaration) -> ctf_string_encoding;
}
extern "C" {
    pub fn bt_ctf_get_array_len(decl: *const bt_declaration) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_ctf_get_struct_field_count(field: *const bt_definition) -> u64;
}
extern "C" {
    pub fn bt_ctf_get_uint64(field: *const bt_definition) -> u64;
}
extern "C" {
    pub fn bt_ctf_get_int64(field: *const bt_definition) -> i64;
}
extern "C" {
    pub fn bt_ctf_get_enum_int(field: *const bt_definition) -> *const bt_definition;
}
extern "C" {
    pub fn bt_ctf_get_enum_str(field: *const bt_definition) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bt_ctf_get_char_array(field: *const bt_definition) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bt_ctf_get_string(field: *const bt_definition) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bt_ctf_get_float(field: *const bt_definition) -> f64;
}
extern "C" {
    pub fn bt_ctf_get_variant(field: *const bt_definition) -> *const bt_definition;
}
extern "C" {
    pub fn bt_ctf_get_struct_field_index(
        field: *const bt_definition,
        i: u64,
    ) -> *const bt_definition;
}
extern "C" {
    pub fn bt_ctf_field_get_error() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_ctf_get_event_decl_list(
        handle_id: ::std::os::raw::c_int,
        ctx: *mut bt_context,
        list: *mut *const *mut bt_ctf_event_decl,
        count: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_ctf_get_decl_event_name(
        event: *const bt_ctf_event_decl,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bt_ctf_get_decl_fields(
        event_decl: *mut bt_ctf_event_decl,
        scope: bt_ctf_scope,
        list: *mut *const *const bt_ctf_field_decl,
        count: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bt_ctf_get_decl_field_name(
        field: *const bt_ctf_field_decl,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_ctf_iter {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bt_ctf_iter_create(
        ctx: *mut bt_context,
        begin_pos: *const bt_iter_pos,
        end_pos: *const bt_iter_pos,
    ) -> *mut bt_ctf_iter;
}
extern "C" {
    pub fn bt_ctf_iter_create_intersect(
        ctx: *mut bt_context,
        inter_begin_pos: *mut *mut bt_iter_pos,
        inter_end_pos: *mut *mut bt_iter_pos,
    ) -> *mut bt_ctf_iter;
}
extern "C" {
    pub fn bt_ctf_get_iter(iter: *mut bt_ctf_iter) -> *mut bt_iter;
}
extern "C" {
    pub fn bt_ctf_iter_destroy(iter: *mut bt_ctf_iter);
}
extern "C" {
    pub fn bt_ctf_iter_read_event(iter: *mut bt_ctf_iter) -> *mut bt_ctf_event;
}
extern "C" {
    pub fn bt_ctf_iter_read_event_flags(
        iter: *mut bt_ctf_iter,
        flags: *mut ::std::os::raw::c_int,
    ) -> *mut bt_ctf_event;
}
extern "C" {
    pub fn bt_ctf_get_lost_events_count(iter: *mut bt_ctf_iter) -> u64;
}
